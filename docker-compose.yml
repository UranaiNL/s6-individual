version: '3'

services:
  ## MySQL Docker Compose Config
#  postgres-game:
#    container_name: postgres-game
#    image: postgres:latest
#    environment:
#      POSTGRES_DB: game-service
#      POSTGRES_USER: uranai
#      POSTGRES_PASSWORD: password
#      PGDATA: /data/postgres
#    volumes:
#      - ./postgres-game:/data/postgres
#    expose:
#      - "5431"
#    ports:
#      - "5431:5431"
#    command: -p 5431
#    restart: always

#  mongo-profile:
#    container_name: mongo-profile
#    image: mongo:4.4.14-rc0-focal
#    restart: always
#    ports:
#      - "27018:27017"
#    expose:
#      - "27017"
#    volumes:
#      - ./mongo-profile-data:/data/db
#
  mongo-subscription:
    container_name: mongo-subscription
    image: mongo:4.4.14-rc0-focal
    restart: always
    ports:
      - "27019:27017"
    expose:
      - "27017"
    volumes:
      - ./mongo-subscription-data:/data/db

  ## Keycloak Config with Mysql database
  ## MySQL Docker Compose Config
  keycloak-db:
    image: postgres
    container_name: keycloak-db
    environment:
      POSTGRES_DB: keycloak
      POSTGRES_USER: keycloak
      POSTGRES_PASSWORD: password
    volumes:
      - ./postgres_keycloak_data:/var/lib/postgres

  keycloak:
    container_name: keycloak
    image: quay.io/keycloak/keycloak:24.0.2
    command: [ "start-dev", "--import-realm" ]
    environment:
      KEYCLOAK_ADMIN: admin
      KEYCLOAK_ADMIN_PASSWORD: admin
      DB_VENDOR: postgres
      DB_ADDR: postgres-db
      DB_DATABASE: keycloak
      DB_USER: keycloak
      DB_PASSWORD: password
    ports:
      - "8080:8080"
    volumes:
      - ./realms/:/opt/keycloak/data/import/
#    depends_on:
#      - keycloak-db

  ## RabbitMQ Setup
  rabbitmq:
    image: rabbitmq:3.13-management
    container_name: rabbitmq
    ports:
      - "5672:5672"
      - "15672:15672"  # Optional: Management UI
    environment:
      RABBITMQ_DEFAULT_USER: guest
      RABBITMQ_DEFAULT_PASS: guest

  ## Zipkin
  zipkin:
    image: openzipkin/zipkin
    container_name: zipkin
    ports:
      - "9411:9411"

  ## Eureka Server
  discovery-server:
    image: noahtenoever/discovery-server:latest
    container_name: discovery-server
    ports:
      - "8761:8761"
    environment:
      - SPRING_PROFILES_ACTIVE=docker
    depends_on:
      - zipkin

  api-gateway:
    image: noahtenoever/api-gateway:latest
    container_name: api-gateway
    ports:
      - "8181:8080"
    expose:
      - "8181"
    environment:
      - SPRING_PROFILES_ACTIVE=docker
      - LOGGING_LEVEL_ORG_SPRINGFRAMEWORK_SECURITY= TRACE
    depends_on:
      - zipkin
      - discovery-server
      - keycloak

  ## Microservices
  ## Replay-Service Docker Compose Config
  replay-service:
    container_name: replay-service
    image: noahtenoever/replay-service:latest
    ports:
      - "8082:8082"
    environment:
      - SPRING_PROFILES_ACTIVE=docker
    depends_on:
      - discovery-server
      - api-gateway
      - zipkin
      - rabbitmq
      - upload-service

  ## Upload-Service Docker Compose Config
  upload-service:
    container_name: upload-service
    image: noahtenoever/upload-service:latest
    ports:
      - "8081:8081"
    environment:
      - SPRING_PROFILES_ACTIVE=docker
      - PROJECT_ID=re-play-420511
      - BUCKET_NAME=replay_upload_database
    volumes:
      - ./upload-service/src/main/resources/gkey.json:/app/resources/gkey.json
    depends_on:
      - discovery-server
      - api-gateway
      - zipkin
      - rabbitmq

#  ## Game-Service Docker Compose Config
#  game-service:
#    container_name: game-service
#    image: noahtenoever/game-service:latest
#    environment:
#      - SPRING_PROFILES_ACTIVE=docker
#      - SPRING_DATASOURCE_URL=jdbc:postgresql://postgres-game:5431/game-service
#    depends_on:
#      - postgres-game
#      - zipkin
#      - discovery-server
#      - api-gateway
#
#  ## Profile-Service Docker Compose Config
#  profile-service:
#    container_name: profile-service
#    image: noahtenoever/profile-service:latest
#    environment:
#      - SPRING_PROFILES_ACTIVE=docker
#    depends_on:
#      - mongo-profile
#      - discovery-server
#      - api-gateway

  ## Product-Service Docker Compose Config
  subscription-service:
    container_name: subscription-service
    image: noahtenoever/subscription-service:latest
    ports:
      - "8083:8083"
    environment:
      - SPRING_PROFILES_ACTIVE=docker
    depends_on:
      - mongo-subscription
      - discovery-server
      - api-gateway
      - rabbitmq

  ## Prometheus
  prometheus:
    image: prom/prometheus:v2.45.1
    container_name: prometheus
    restart: unless-stopped
    ports:
      - "9090:9090"
    volumes:
      - ./prometheus/prometheus.yml:/etc/prometheus/prometheus.yml
    depends_on:
      - subscription-service
      - replay-service
      - upload-service

  grafana:
    image: grafana/grafana-oss:8.5.2
    container_name: grafana
    restart: unless-stopped
    ports:
      - "3000:3000"
    links:
      - prometheus:prometheus
    volumes:
      - ./grafana:/var/lib/grafana
    environment:
      - GF_SECURITY_ADMIN_USER=admin
      - GF_SECURITY_ADMIN_PASSWORD=password
      - GF_SERVER_ROOT_URL=http://api-gateway:8080/grafana/